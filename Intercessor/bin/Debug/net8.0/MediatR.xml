<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intercessor</name>
    </assembly>
    <members>
        <member name="T:Intercessor.Abstractions.ICommand">
            <summary>
            Defines a command interface for operations that modify state or perform actions.
            </summary>
        </member>
        <member name="T:Intercessor.Abstractions.ICommand`1">
            <summary>
            Defines a generic command interface for operations that modify state or perform actions with a specific response type <see cref="T:Intercessor.Abstractions.IRequest`1"/>.
            </summary>
            <typeparam name="TResponse">The type of the response returned by the command.</typeparam>
        </member>
        <member name="T:Intercessor.Abstractions.ICommandHandler`2">
            <summary>
            Defines a command handler for handling commands that produce a response.
            Implement this interface to handle commands of type <typeparamref name="TCommand"/> and return a response of type <typeparamref name="TResponse"/>.
            </summary>
            <typeparam name="TCommand">
            The type of request to handle, which must implement <see cref="T:Intercessor.Abstractions.IRequest`1"/>.
            </typeparam>
            <typeparam name="TResponse">
            The type of response the handler will return when processing the command.
            </typeparam>
        </member>
        <member name="T:Intercessor.Abstractions.ICommandHandler`1">
            <summary>
            Defines a command handler for handling commands that does not produce a response.
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="T:Intercessor.Abstractions.INotification">
            <summary>
            Marker interface to represent an event or notification that can be published by the mediator.
            Implementing this interface allows an object to be handled by one or more <see cref="T:Intercessor.Abstractions.INotificationHandler`1"/>.
            </summary>
        </member>
        <member name="T:Intercessor.Abstractions.INotificationHandler`1">
            <summary>
            Defines a handler for a specific type of notification. 
            Implement this interface to handle notifications that implement <see cref="T:Intercessor.Abstractions.INotification"/>.
            </summary>
            <typeparam name="TNotification">
            The type of notification to handle. Must implement <see cref="T:Intercessor.Abstractions.INotification"/>.
            </typeparam>
        </member>
        <member name="M:Intercessor.Abstractions.INotificationHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles the notification asynchronously.
            </summary>
            <param name="notification">The notification instance to handle.</param>
            <param name="cancellationToken">A token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Intercessor.Abstractions.IPublisher">
            <summary>
            Defines a publisher responsible for broadcasting notifications to all registered <see cref="T:Intercessor.Abstractions.INotificationHandler`1"/> instances.
            </summary>
        </member>
        <member name="M:Intercessor.Abstractions.IPublisher.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Publishes a notification to all registered handlers asynchronously (One-to-Many).
            </summary>
            <typeparam name="TNotification">The type of notification being published. Must implement <see cref="T:Intercessor.Abstractions.INotification"/>.</typeparam>
            <param name="notification">The notification instance to publish.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A task that represents the asynchronous publish operation.</returns>
        </member>
        <member name="T:Intercessor.Abstractions.IQuery">
            <summary>
            Marker interface to represent a query that produces a response when handled.
            </summary>
        </member>
        <member name="T:Intercessor.Abstractions.IQuery`1">
            <summary>
            Represents a query that produces a response when handled by <see cref="T:Intercessor.Abstractions.IRequestHandler`2"/>.
            </summary>
            <typeparam name="TResponse">
            The type of response that the request will produce when handled.
            </typeparam>
        </member>
        <member name="T:Intercessor.Abstractions.ICachedQuery`1">
            <summary>
            Represents a cached query that produces a response when handled by <see cref="T:Intercessor.Abstractions.IRequestHandler`2"/>.
            </summary>
            <typeparam name="TResponse">
            The type of response that the request will produce when handled.
            </typeparam>
        </member>
        <member name="P:Intercessor.Abstractions.ICachedQuery`1.CacheKey">
            <summary>
            The cache key associated with the request.
            </summary>
        </member>
        <member name="P:Intercessor.Abstractions.ICachedQuery`1.CacheDuration">
            <summary>
            The duration for which the cache is valid. If null, the cache has no expiration.
            </summary>
        </member>
        <member name="T:Intercessor.Abstractions.IQueryHandler`2">
            <summary>
            Defines a query handler for handling queries that produce a response.
            Implement this interface to handle queries of type <typeparamref name="TQuery"/> and return a response of type <typeparamref name="TResponse"/>.
            </summary>
            <typeparam name="TQuery">
            The type of request to handle, which must implement <see cref="T:Intercessor.Abstractions.IQuery`1"/>.
            </typeparam>
            <typeparam name="TResponse">
            The type of response the handler will return when processing the query.
            </typeparam>
        </member>
        <member name="T:Intercessor.Abstractions.IRequest">
            <summary>
            Marker interface to represent a request that can be handled by the mediator.
            Implementing this interface allows an object to be handled by one or more <see cref="T:Intercessor.Abstractions.IRequestHandler`2"/>.
            </summary>
        </member>
        <member name="T:Intercessor.Abstractions.IRequest`1">
            <summary>
            Represents a request that produces a response when handled.
            Implementing this interface allows an object to be handled by one or more <see cref="T:Intercessor.Abstractions.IRequestHandler`2"/>.
            </summary>
            <typeparam name="TResponse">
            The type of response that the request will produce when handled.
            </typeparam>
        </member>
        <member name="T:Intercessor.Abstractions.IRequestHandler`2">
            <summary>
            Defines a request handler for handling requests that produce a response.
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:Intercessor.Abstractions.IRequestHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles the specified request asynchronously and returns a response.
            </summary>
            <param name="request">The request to handle.</param>
            <param name="cancellationToken">A cancellation token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation, with the <typeparamref name="TResponse"/> result.</returns>
        </member>
        <member name="T:Intercessor.Abstractions.IRequestHandler`1">
            <summary>
            Defines a request handler for handling requests.
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="M:Intercessor.Abstractions.IRequestHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handles the specified request asynchronously.
            </summary>
            <param name="request">The request to handle.</param>
            <param name="cancellationToken">A cancellation token to monitor for cancellation requests.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Intercessor.Abstractions.ISender">
            <summary>
            Defines a sender that is responsible for sending requests (Commands/Queries) to the appropriate handlers.
            Implementing this interface allows sending requests of type <see cref="T:Intercessor.Abstractions.IRequest`1"/> and receiving responses.
            </summary>
        </member>
        <member name="M:Intercessor.Abstractions.ISender.SendAsync``1(Intercessor.Abstractions.IRequest{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a request (Command or Query) to the appropriate handler asynchronously to get a response.
            </summary>
            <typeparam name="TResponse">
            The type of response the request will produce when handled.
            </typeparam>
            <param name="request">The request to send, which must implement <see cref="T:Intercessor.Abstractions.IRequest`1"/>.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation, with the <typeparamref name="TResponse"/> result.</returns>
        </member>
        <member name="M:Intercessor.Abstractions.ISender.SendAsync(Intercessor.Abstractions.IRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a request (Command) to the appropriate handler asynchronously.
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Intercessor.Behaviours.CircuitBreakerBehavior`2">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.CircuitBreakerBehavior`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.CircuitBreakerBehavior`2"/> class,
            setting up a circuit breaker policy to handle transient failures gracefully.
            </summary>
            <remarks>
            The circuit breaker will open after 3 consecutive exceptions and stay open for 10 seconds.
            During the open state, any further requests will fail fast.
            Logging is performed on break, reset, and half-open transitions.
            </remarks>
        </member>
        <member name="M:Intercessor.Behaviours.CircuitBreakerBehavior`2.HandleAsync(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.Behaviours.CircuitBreakerBehavior`1">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.CircuitBreakerBehavior`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.CircuitBreakerBehavior`1"/> class,
            setting up a circuit breaker policy to handle transient failures gracefully.
            </summary>
            <remarks>
            The circuit breaker will open after 3 consecutive exceptions and stay open for 10 seconds.
            During the open state, any further requests will fail fast.
            Logging is performed on break, reset, and half-open transitions.
            </remarks>
        </member>
        <member name="M:Intercessor.Behaviours.CircuitBreakerBehavior`1.HandleAsync(`0,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.Behaviours.IPipelineBehavior`2">
            <summary>
            Defines a pipeline behavior that can be used to add cross-cutting concerns
            (such as logging, validation, performance monitoring, etc.)
            around the handling of a Intercessor request.
            </summary>
            <typeparam name="TRequest">The type of the request being handled.</typeparam>
            <typeparam name="TResponse">The type of the response returned by the request handler.</typeparam>
        </member>
        <member name="M:Intercessor.Behaviours.IPipelineBehavior`2.HandleAsync(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken)">
            <summary>
            Handles the request by invoking the specified delegate, allowing additional
            behavior to be executed before and/or after the next delegate in the pipeline.
            </summary>
            <param name="request">The incoming request.</param>
            <param name="next">The next delegate in the pipeline to invoke.</param>
            <param name="cancellationToken">A cancellation token for the operation.</param>
            <returns>A task representing the asynchronous operation, with a response of type <typeparamref name="TResponse"/>.</returns>
        </member>
        <member name="T:Intercessor.Behaviours.IPipelineBehavior`1">
            <summary>
            Defines a pipeline behavior that can be used to add cross-cutting concerns
            (such as logging, validation, performance monitoring, etc.)
            around the handling of a Intercessor request.
            </summary>
            <typeparam name="TRequest">The type of the request being handled.</typeparam>
        </member>
        <member name="M:Intercessor.Behaviours.IPipelineBehavior`1.HandleAsync(`0,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Handles the request by invoking the specified delegate, allowing additional
            behavior to be executed before and/or after the next delegate in the pipeline.
            </summary>
            <param name="request">The incoming request.</param>
            <param name="next">The next delegate in the pipeline to invoke.</param>
            <param name="cancellationToken">A cancellation token for the operation.</param>
        </member>
        <member name="T:Intercessor.Behaviours.LoggingBehavior`2">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.LoggingBehavior`2.#ctor(Microsoft.Extensions.Logging.ILogger{Intercessor.Behaviours.LoggingBehavior{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.LoggingBehavior`2"/> class,
            which logs information about the request and its handling for diagnostic and monitoring purposes.
            </summary>
            <param name="logger">
            The logger used to record request execution details, such as start, end, and exceptions.
            </param>
        </member>
        <member name="M:Intercessor.Behaviours.LoggingBehavior`2.HandleAsync(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.Behaviours.LoggingBehavior`1">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.LoggingBehavior`1.#ctor(Microsoft.Extensions.Logging.ILogger{Intercessor.Behaviours.LoggingBehavior{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.LoggingBehavior`1"/> class,
            which logs information about the request and its handling for diagnostic and monitoring purposes.
            </summary>
            <param name="logger">
            The logger used to record request execution details, such as start, end, and exceptions.
            </param>
        </member>
        <member name="M:Intercessor.Behaviours.LoggingBehavior`1.HandleAsync(`0,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.Behaviours.RedisCachingBehavior`2">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.RedisCachingBehavior`2.#ctor(StackExchange.Redis.IConnectionMultiplexer,Microsoft.Extensions.Logging.ILogger{Intercessor.Behaviours.RedisCachingBehavior{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.RedisCachingBehavior`2"/> class,
            which provides caching capabilities using Redis to store and retrieve request/response data.
            </summary>
            <param name="redis">
            The Redis connection multiplexer used to access the Redis database.
            </param>
            <param name="logger">
            The logger used to log cache operations such as hits, misses, and exceptions.
            </param>
        </member>
        <member name="M:Intercessor.Behaviours.RedisCachingBehavior`2.HandleAsync(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.Behaviours.RetryBehavior`2">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.RetryBehavior`2.#ctor(Microsoft.Extensions.Logging.ILogger{Intercessor.Behaviours.RetryBehavior{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.RetryBehavior`2"/> class,
            which applies a retry policy with exponential backoff to handle transient failures during request processing.
            </summary>
            <param name="logger">
            The logger used to record retry attempts, including warnings on exceptions and contextual information about the request.
            </param>
        </member>
        <member name="M:Intercessor.Behaviours.RetryBehavior`2.HandleAsync(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.Behaviours.RetryBehavior`1">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.RetryBehavior`1.#ctor(Microsoft.Extensions.Logging.ILogger{Intercessor.Behaviours.RetryBehavior{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.RetryBehavior`1"/> class,
            which applies a retry policy with exponential backoff to handle transient failures during request processing.
            </summary>
            <param name="logger">
            The logger used to record retry attempts, including warnings on exceptions and contextual information about the request.
            </param>
        </member>
        <member name="M:Intercessor.Behaviours.RetryBehavior`1.HandleAsync(`0,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.Behaviours.ValidationBehavior`2">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.ValidationBehavior`2.#ctor(System.Collections.Generic.IEnumerable{FluentValidation.IValidator{`0}},Microsoft.Extensions.Logging.ILogger{Intercessor.Behaviours.ValidationBehavior{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.ValidationBehavior`2"/> class,
            which is used to validate requests using FluentValidation before they reach the handler.
            </summary>
            <param name="validators">
            A collection of validators for the incoming <typeparamref name="TRequest"/>.
            Each validator is applied to ensure the request meets expected rules.
            </param>
            <param name="logger">
            The logger used to log validation information or errors.
            </param>
        </member>
        <member name="M:Intercessor.Behaviours.ValidationBehavior`2.HandleAsync(`0,System.Func{System.Threading.Tasks.Task{`1}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.Behaviours.ValidationBehavior`1">
            <inheritdoc />
        </member>
        <member name="M:Intercessor.Behaviours.ValidationBehavior`1.#ctor(System.Collections.Generic.IEnumerable{FluentValidation.IValidator{`0}},Microsoft.Extensions.Logging.ILogger{Intercessor.Behaviours.ValidationBehavior{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.Behaviours.ValidationBehavior`1"/> class,
            which is used to validate requests using FluentValidation before they reach the handler.
            </summary>
            <param name="validators">
            A collection of validators for the incoming <typeparamref name="TRequest"/>.
            Each validator is applied to ensure the request meets expected rules.
            </param>
            <param name="logger">
            The logger used to log validation information or errors.
            </param>
        </member>
        <member name="M:Intercessor.Behaviours.ValidationBehavior`1.HandleAsync(`0,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Intercessor.CommandHandlerGenerator">
            <summary>
            A source generator that automatically creates request handlers for Intercessor IRequest implementations.
            </summary>
        </member>
        <member name="M:Intercessor.CommandHandlerGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the incremental source generator by registering a syntax provider that scans for types
            implementing the <c>IRequest&lt;TResponse&gt;</c> interface from Intercessor. When such types are found,
            this generator produces corresponding <c>IRequestHandler&lt;TRequest, TResponse&gt;</c> implementations
            as compile-time-generated C# classes.
            </summary>
            <param name="context">The initialization context provided by the Roslyn compiler.</param>
        </member>
        <member name="T:Intercessor.Extensions">
            <summary>
            Extension methods to register Intercessor
            </summary>
        </member>
        <member name="M:Intercessor.Extensions.AddIntercessor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Intercessor.IntercessorBuilder})">
            <summary>
            Register Intercessor to ServiceCollection
            </summary>
            <param name="services"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Intercessor.IntercessorBuilder">
            <summary>
            Provides a fluent builder for configuring and registering Intercessor-related services,
            such as request handlers, notification handlers, and pipeline behaviors, 
            into the application's dependency injection container.
            </summary>
        </member>
        <member name="M:Intercessor.IntercessorBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Intercessor.IntercessorBuilder"/> class,
            binding it to the provided dependency‑injection container.  
            Use this builder to configure and register Intercessor handlers, behaviors,
            and related services before the container is built.
            </summary>
            <param name="services">
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> that Intercessor components will be
            added to and configured within.
            </param>
        </member>
        <member name="M:Intercessor.IntercessorBuilder.RegisterFromAssembly(System.Reflection.Assembly)">
            <summary>
            Adds an assembly for Intercessor handler registrations.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to register.</param>
        </member>
        <member name="M:Intercessor.IntercessorBuilder.Build">
            <summary>
            Finalizes the Intercessor registration by adding core services and scanning the configured assemblies
            for Intercessor handler implementations. This includes:
            <list type="bullet">
              <item><description><see cref="T:Intercessor.Abstractions.INotification"/>, <see cref="T:Intercessor.Abstractions.ISender"/>, <see cref="T:Intercessor.Abstractions.IPublisher"/> core services</description></item>
              <item><description><see cref="T:Intercessor.Abstractions.IQueryHandler`2"/></description></item>
              <item><description><see cref="T:Intercessor.Abstractions.ICommandHandler`2"/></description></item>
              <item><description><see cref="T:Intercessor.Abstractions.ICommandHandler`1"/></description></item>
              <item><description><see cref="T:Intercessor.Behaviours.IPipelineBehavior`2"/></description></item>
              <item><description><see cref="T:Intercessor.Behaviours.IPipelineBehavior`1"/></description></item>
              <item><description><see cref="T:Intercessor.Behaviours.ValidationBehavior`2"/></description></item>
              <item><description><see cref="T:Intercessor.Behaviours.ValidationBehavior`1"/></description></item>
              <item><description><see cref="T:FluentValidation.IValidator`1"/></description></item> and
              <item><description><see cref="T:Intercessor.Abstractions.INotificationHandler`1"/> implementations via Scrutor assembly scanning</description></item>
            </list>
            This method is called internally after configuration via <c>AddMediatR(cfg => ...)</c>.
            </summary>
        </member>
        <member name="T:Intercessor.NotificationHandlerGenerator">
            <summary>
            A source generator that automatically creates notification handlers for Intercessor INotification implementations.
            </summary>
        </member>
        <member name="M:Intercessor.NotificationHandlerGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the incremental source generator by registering a syntax provider that scans for types
            implementing the INotification interface from Intercessor. When such types are found,
            this generator produces corresponding INotificationHandler implementations
            as compile-time-generated C# classes. The initialization context provided by the Roslyn compiler. 
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Intercessor.QueryHandlerGenerator">
            <summary>
            A source generator that automatically creates request handlers for Intercessor IRequest implementations.
            </summary>
        </member>
        <member name="M:Intercessor.QueryHandlerGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <summary>
            Initializes the incremental source generator by registering a syntax provider that scans for types
            implementing the <c>IRequest&lt;TResponse&gt;</c> interface from Intercessor. When such types are found,
            this generator produces corresponding <c>IRequestHandler&lt;TRequest, TResponse&gt;</c> implementations
            as compile-time-generated C# classes.
            </summary>
            <param name="context">The initialization context provided by the Roslyn compiler.</param>
        </member>
    </members>
</doc>
